// Code generated by MockGen. DO NOT EDIT.
// Source: ../interfaces/contact.go

// Package database is a generated GoMock package.
package database

import (
	models "contacts/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIContact is a mock of IContact interface.
type MockIContact struct {
	ctrl     *gomock.Controller
	recorder *MockIContactMockRecorder
}

// MockIContactMockRecorder is the mock recorder for MockIContact.
type MockIContactMockRecorder struct {
	mock *MockIContact
}

// NewMockIContact creates a new mock instance.
func NewMockIContact(ctrl *gomock.Controller) *MockIContact {
	mock := &MockIContact{ctrl: ctrl}
	mock.recorder = &MockIContactMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContact) EXPECT() *MockIContactMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIContact) Create(contact *models.Contact) (*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", contact)
	ret0, _ := ret[0].(*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIContactMockRecorder) Create(contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIContact)(nil).Create), contact)
}

// DeleteBy mocks base method.
func (m *MockIContact) DeleteBy(id string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBy", id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBy indicates an expected call of DeleteBy.
func (mr *MockIContactMockRecorder) DeleteBy(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBy", reflect.TypeOf((*MockIContact)(nil).DeleteBy), id)
}

// GetBy mocks base method.
func (m *MockIContact) GetBy(id string) (*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBy", id)
	ret0, _ := ret[0].(*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBy indicates an expected call of GetBy.
func (mr *MockIContactMockRecorder) GetBy(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBy", reflect.TypeOf((*MockIContact)(nil).GetBy), id)
}

// UpdateBy mocks base method.
func (m *MockIContact) UpdateBy(id string, data map[string]interface{}) (*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBy", id, data)
	ret0, _ := ret[0].(*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBy indicates an expected call of UpdateBy.
func (mr *MockIContactMockRecorder) UpdateBy(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBy", reflect.TypeOf((*MockIContact)(nil).UpdateBy), id, data)
}
